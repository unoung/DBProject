create or replace NONEDITIONABLE PACKAGE BODY PKG_CHECK AS

 --추가
  PROCEDURE PROC_INS_CHECK
(
    --IN_CHK_ID       IN     VARCHAR2
     IN_R_ID        IN     VARCHAR2
    --,IN_CHECK_TIME    IN  VARCHAR2
    ,IN_CHECK_GUBUN  IN   VARCHAR2
    ,O_ERRCODE      OUT VARCHAR
    ,O_ERRMSG       OUT VARCHAR
)  
  AS
  
	V_R_ID    		NUMBER(1);
    V_GUBUN   		CHAR(1);
    V_CHK_ID   		NUMBER(1);
	V_NEW_CHK_ID	CHAR(6);

    V_EXCEPTION1  EXCEPTION;
    V_EXCEPTION2  EXCEPTION;
	V_EXCEPTION3  EXCEPTION;

    
  BEGIN
 
		SELECT COUNT(T1.R_ID)
		INTO V_R_ID
		FROM RESERVATION_TBL T1, CANCLE_RESERVATION_TBL T2
		WHERE T1.R_ID = T2.R_ID(+)
		AND T2.R_ID IS NULL
        AND T1.R_ID = IN_R_ID
		;
		
		SELECT COUNT(CHK_ID)
		INTO V_CHK_ID
		FROM CHECK_TBL 
		WHERE R_ID = IN_R_ID
		;
		
        SELECT 'CHK' || TO_CHAR(TO_NUMBER(NVL(SUBSTR(MAX(CHK_ID),4,3),0))+1,'FM000')
		INTO V_NEW_CHK_ID
		FROM CHECK_TBL;
			
        IF V_R_ID = 0 THEN
			RAISE V_EXCEPTION1;
		
		ELSIF V_CHK_ID = 0 THEN      
			IF IN_CHECK_GUBUN = 'O' THEN
				RAISE V_EXCEPTION3;
			END IF;
			
			INSERT INTO CHECK_TBL(CHK_ID, R_ID, CHECK_TIME, CHECK_GUBUN)
			VALUES(V_NEW_CHK_ID, IN_R_ID, SYSDATE, 'I');
		
		ELSIF V_CHK_ID = 1 THEN
			IF IN_CHECK_GUBUN = 'I' THEN
				RAISE V_EXCEPTION2;
			END IF;
			
			INSERT INTO CHECK_TBL(CHK_ID, R_ID, CHECK_TIME, CHECK_GUBUN)
			VALUES(V_NEW_CHK_ID, IN_R_ID, SYSDATE, 'O');
			
		ELSE
			RAISE V_EXCEPTION2;
			
    END IF;

      EXCEPTION
        WHEN V_EXCEPTION1 THEN
      O_ERRMSG := '예약되어있지 않은 정보입니다!';
      O_ERRCODE := 'ERR001';
      ROLLBACK;
      WHEN V_EXCEPTION2 THEN
      O_ERRMSG := '이미 중복된 정보입니다!';
      O_ERRCODE := 'ERR002';
      ROLLBACK;
	  WHEN V_EXCEPTION3 THEN
      O_ERRMSG := '체크인되지 않은 정보입니다.';
      O_ERRCODE := 'ERR003';
      ROLLBACK;
      WHEN OTHERS THEN
      O_ERRMSG := SQLERRM;
      O_ERRCODE := SQLCODE;
      ROLLBACK;
      
  END PROC_INS_CHECK;

--조회
  PROCEDURE PROC_SEL_CHECK
(
    IN_CHK_ID        IN     VARCHAR2
    ,IN_R_ID         IN     VARCHAR2
    ,IN_CHECK_GUBUN  IN     VARCHAR2
    ,O_CURSOR        OUT    SYS_REFCURSOR
) 
  AS
  
  
  BEGIN
    OPEN O_CURSOR FOR
    -- 체크테이블 조회
	SELECT T1.CHK_ID, T1.R_ID, T3.CUST_ID, T3.CUST_NAME, T3.CUST_TEL, T1.CHECK_GUBUN
			, TO_CHAR(T1.CHECK_TIME, 'YY/MM/DD HH24:MI')
	FROM CHECK_TBL T1, RESERVATION_TBL T2, CUSTOMER_TBL T3
	WHERE T1.R_ID = T2.R_ID
	AND T2.CUST_ID = T3.CUST_ID
    AND T1.CHK_ID LIKE '%' ||IN_CHK_ID|| '%'
	AND T1.R_ID LIKE '%' || IN_R_ID || '%'
	AND T1.CHECK_GUBUN LIKE '%' || IN_CHECK_GUBUN || '%'
	ORDER BY T1.CHK_ID
    ;
  END PROC_SEL_CHECK;

--수정
  PROCEDURE PROC_UP_CHECK
(
    IN_CHK_ID        IN     VARCHAR2
    ,IN_R_ID         IN     VARCHAR2
    --,IN_CHECK_TIME   IN     VARCHAR2
    ,IN_CHECK_GUBUN  IN     VARCHAR2
    ,O_ERRCODE       OUT    VARCHAR
    ,O_ERRMSG        OUT    VARCHAR
) 
   AS
  
	V_R_ID    		NUMBER(1);
    V_GUBUN   		CHAR(1);
    V_CHK_ID   		NUMBER(1);
	V_NEW_CHK_ID	CHAR(6);
	V_CHK_I_TO_O	NUMBER(5);

    V_EXCEPTION1  EXCEPTION;
    V_EXCEPTION2  EXCEPTION;
	V_EXCEPTION3  EXCEPTION;
	V_IN_TO_OUT_EXCEPTION	EXCEPTION;
    
  BEGIN
	  
	    SELECT COUNT(T1.R_ID)
		INTO V_R_ID
		FROM RESERVATION_TBL T1, CANCLE_RESERVATION_TBL T2
		WHERE T1.R_ID = T2.R_ID(+)
		AND T2.R_ID IS NULL
        AND T1.R_ID = IN_R_ID
		;
		
		SELECT COUNT(CHK_ID)
		INTO V_CHK_ID
		FROM CHECK_TBL 
		WHERE R_ID = IN_R_ID
		AND CHECK_GUBUN = IN_CHECK_GUBUN
		;
			
        IF V_R_ID = 0 THEN
			RAISE V_EXCEPTION1;
		
		ELSIF V_CHK_ID > 0 THEN
			RAISE V_EXCEPTION2;
			
		ELSIF IN_CHECK_GUBUN = 'O' THEN  
			SELECT COUNT(CHECK_GUBUN)
			INTO V_CHK_I_TO_O
			FROM CHECK_TBL
			WHERE R_ID = IN_R_ID
			AND CHECK_GUBUN = 'I'
			AND CHK_ID != IN_CHK_ID
			;
			
			IF V_CHK_I_TO_O = 0 THEN
				RAISE V_EXCEPTION3;
			END IF;
			
		ELSE 
			UPDATE CHECK_TBL
			SET R_ID = IN_R_ID, CHECK_GUBUN = IN_CHECK_GUBUN 
			WHERE CHK_ID = IN_CHK_ID
			;
    END IF;

      EXCEPTION
        WHEN V_EXCEPTION1 THEN
      O_ERRMSG := '예약되어있지 않은 정보입니다!';
      O_ERRCODE := 'ERR001';
      ROLLBACK;
      WHEN V_EXCEPTION2 THEN
      O_ERRMSG := '이미 중복된 정보입니다!';
      O_ERRCODE := 'ERR002';
      ROLLBACK;
	  WHEN V_EXCEPTION3 THEN
      O_ERRMSG := '체크인되지 않은 정보입니다.';
      O_ERRCODE := 'ERR003';
      ROLLBACK;
      WHEN OTHERS THEN
      O_ERRMSG := SQLERRM;
      O_ERRCODE := SQLCODE;
      ROLLBACK;
      
  END PROC_UP_CHECK;


--삭제
  PROCEDURE PROC_DEL_CHECK
(
    IN_CHK_ID           IN      VARCHAR2
    --,IN_R_ID          IN      VARCHAR2
    --,IN_CHECK_TIME    IN      VARCHAR2
    --,IN_CHECK_GUBUN   IN      VARCHAR2
    ,O_ERRCODE          OUT     VARCHAR
    ,O_ERRMSG           OUT     VARCHAR
)   
  AS
  
    V_CHK_CNT    CHAR(6);
    V_EXCEPTION  EXCEPTION;
    
  BEGIN
 
    SELECT COUNT(CHK_ID) 
    INTO V_CHK_CNT
    FROM CHECK_TBL 
    WHERE CHK_ID = IN_CHK_ID;
    
    IF V_CHK_CNT > 0 THEN
       DELETE FROM CHECK_TBL
       WHERE CHK_ID = IN_CHK_ID;
    ELSE 
        RAISE V_EXCEPTION;
    END IF;
    
      EXCEPTION
      WHEN V_EXCEPTION THEN
      O_ERRMSG := '정보가 없습니다!';
      O_ERRCODE := 'ERR001';
      ROLLBACK;
      WHEN OTHERS THEN
      O_ERRMSG := SQLERRM;
      O_ERRCODE := SQLCODE;
      
      
  END PROC_DEL_CHECK;

END PKG_CHECK;